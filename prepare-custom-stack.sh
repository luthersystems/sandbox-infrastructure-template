#!/usr/bin/env bash
set -euo pipefail

# Where to copy customer TF into:
TARGET_DIR="tf/custom-stack"

# Inputs (override via env in the workflow step)
CUSTOM_REPO_URL="${CUSTOM_REPO_URL:-https://github.com/luthersystems/reliable-custom-tf-test}"
CUSTOM_REF="${CUSTOM_REF:-main}"
CUSTOM_PATH="${CUSTOM_PATH:-}"               # optional subdir inside repo
CUSTOM_TFVARS_JSON="${CUSTOM_TFVARS_JSON:-}" # optional raw JSON for auto-vars
CUSTOM_AUTH="${CUSTOM_AUTH:-token}"          # token|ssh

# Utilities
log() { echo "[prepare-custom-stack] $*" >&2; }

# Clean target but keep backend.tf if already generated by cloud-provision
preserve_backend=""
if [[ -f "${TARGET_DIR}/backend.tf" ]]; then
  preserve_backend="$(mktemp)"
  cp -f "${TARGET_DIR}/backend.tf" "${preserve_backend}"
fi
rm -rf "${TARGET_DIR:?}/"* || true
mkdir -p "${TARGET_DIR}"

if [[ -n "${preserve_backend}" && -f "${preserve_backend}" ]]; then
  mv -f "${preserve_backend}" "${TARGET_DIR}/backend.tf"
fi

# Auth setup
git_config_common() {
  git config --global advice.detachedHead false || true
}

git_clone_with_token() {
  local url="$1" ref="$2" dest="$3"
  if [[ -z "${GITHUB_TOKEN:-}" ]]; then
    log "ERROR: CUSTOM_AUTH=token but GITHUB_TOKEN is not set"
    exit 2
  fi
  # Inject token into https URL
  local token_url="$url"
  if [[ "$token_url" =~ ^https:// ]]; then
    token_url="${url/https:\/\//https:\/\/${GITHUB_TOKEN}@}"
  fi
  git clone --depth 1 --no-tags --branch "$ref" "$token_url" "$dest"
}

git_clone_with_ssh() {
  local url="$1" ref="$2" dest="$3"
  # Assumes /root/.ssh is mounted (same secret as TF module ssh); StrictHostKeyChecking off to avoid prompts
  GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no' git clone --depth 1 --no-tags --branch "$ref" "$url" "$dest"
}

# Clone
git_config_common
tmp_dir="$(mktemp -d)"
case "$CUSTOM_AUTH" in
token) git_clone_with_token "$CUSTOM_REPO_URL" "$CUSTOM_REF" "$tmp_dir" ;;
ssh) git_clone_with_ssh "$CUSTOM_REPO_URL" "$CUSTOM_REF" "$tmp_dir" ;;
*)
  log "ERROR: unknown CUSTOM_AUTH=$CUSTOM_AUTH"
  exit 2
  ;;
esac

# Select path within repo (if provided)
src_path="$tmp_dir"
if [[ -n "$CUSTOM_PATH" ]]; then
  src_path="$tmp_dir/$CUSTOM_PATH"
  if [[ ! -d "$src_path" ]]; then
    log "ERROR: CUSTOM_PATH '$CUSTOM_PATH' not found in repo"
    exit 2
  fi
fi

# Copy customer files into tf/custom-stack, excluding .git
rsync -a --delete --exclude '.git' "$src_path"/ "$TARGET_DIR"/

# Optional: write auto-vars JSON for the custom stack
if [[ -n "$CUSTOM_TFVARS_JSON" ]]; then
  mkdir -p tf/auto-vars
  echo "$CUSTOM_TFVARS_JSON" >tf/auto-vars/custom-stack.auto.tfvars.json
  log "Wrote tf/auto-vars/custom-stack.auto.tfvars.json"
fi

log "Prepared ${TARGET_DIR} from ${CUSTOM_REPO_URL}@${CUSTOM_REF}${CUSTOM_PATH:+ path=$CUSTOM_PATH}"
